using Vite + react



		COMPONENTS

the App.jsx file defines a component (called App), and the final line of the main.jsx file renders it into the element with ID "root" (in this case a div element)

		ReactDOM.createRoot(document.getElementById('root')).render(<App />)


by default when working with React, the index.html does not contain any HTML markup visible in the browser. All content that needs to be rendered is usually defined as a React component. technically these components are defined as JavaScript functions. the following is a function (receiving no aprameters)

		() => (
		  <div>
		    <p>Hello world</p>
		  </div>
		)

the function is assigned a variable App: const App = ...

there are several ways to describe a function in JS, here we are using arrow functions, as described in ES6. since the function contains only one expression, it has been written using shorthand. the extended version would be 


		const App = () => {
		  return (
		    <div>
		      <p>Hello world</p>
		    </div>
		  )
		} 


Reacty basically lets you create the page using a mix of HTML and JS, adding interactivity and functionality to the page in one swoop. In truth, even though it looks like React components are returning HTML markup, the layout is actually written in JSX. although it looks a lot like HTML, JSX is a method for writing in JS; under the hood, all the JSX returned by the React component is being compiled into JavaScript. 
The compilation of JSX into JS is handled by Babel; the projects created using Vite or create-react-app are configured so they compile automatically. It is also possible to write React as "pure JavaScript" without using JSX. Although, nobody with a sound mind would do so.


the truth is that JSX is much like HTML, but it also allows you to add dynamic content by using the appropriate JavaScript within curly braces.
JSX is "XML-like", in that every tag needs to be closed. empty elements in HTML can be written as, eg: <br>, but in JSX the tag will have to be closed, like <br />


		MULTIPLE COMPONENTS


it is possible top nest components by adding them inside your other components as a closed, empty tag:


const Hello = () => {
  return (
    <div>
      <p>Hello world</p>
    </div>
  )
}

const App = () => {
  return (
    <div>
      <h1>Greetings</h1>
      <Hello />
    </div>
  )
}


Naturally, a component can be reused multiple times.



		PROPS: passing data to components


it is possible to transfer data between components by using props. the function receiving the props needs to have "props" as a parameter eg

const Hello = (props) => {}


props are defined as follows: 

const App = () => {
  return (
    <div>
      <h1>Greetings</h1>

      <Hello name='George' />
      <Hello name='Daisy' />
    </div>
  )
}


the values of the props can be hard-coded strings or the results of JS expressions; naturally, if the value is obtained through a JavaScript expression, it needs be wrapped between curly braces {}


