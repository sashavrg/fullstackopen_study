				Component state, event handlers



		COMPONENT HELPER FUNCTIONS


we can add to a component one or more functions that are called when the component is rendered. what we're doing here is nesting a function inside of another function which is defining the behavior of the component. while this is pretty cumbersome in Java, it's a commonly-used technique in JavaScript.


		DESTRUCTURING


in our code before we had to reference the data passed to our component as props.name and props.age; since props is an object

	props = {
	  name: 'Shoto',
	  age: 3,
        }

we can streamline  our component by assigning the two properties of the object as variables and then use them in our code.
we can also use a more compact syntax for the arrow function:

	const bornYear = () => {
    const yearNow = new Date().getFullYear()
    return yearNow - props.age


to

	const bornYear = () => new Date().getFullYear() - age


this because when the arrow function consists of a single expression, the function body does not need to be written inside of curly braces; with this version the function simply returns the result of the expression.

we can also declare at once several constants by using the {} syntax and declaring the names of the constants in the braces

	const Hello = (props) => {
	  const { name, age } = props

we can further destructure the props object assigning the values of the properties directly to variables, passing the component function as a parameter:

	const Hello ({ name, age }) => {



		PAGE RE-RENDERING

what if we wanted to have the page change dynamically after the original rendering? we can work on the rendering part in main.jsx by wrapping it up in a function (in this case it's a function called refresh). we can make it a little more interesting by using setInterval in order to refresh several times.  

making repeated calls to the render method is not a recommended way to re-render components, but we'll soon introduce a better method.


		STATEFUL COMPONENT


all the components we have created until now have been simple, meaning that they have not contained any state that could change during the life cycle of the component. we're now going to add a state to our app component.


import { useState } from 'react'

const App = () => {

  const [ counter, setCounter ] = useState(0)


  setTimeout(
    () => setCounter(counter + 1),
    1000
  )

  return (
    <div>{counter}</div>
  )
}

export default App





the first row is used to import the useState function. the function body that defines the component's behavior starts with a function call: const [ counter, setCounter ] = useState(0)

this function call adds state to the components and sets it to 0. the function returns an array of two items,assigned to the constants 'counter' and 'setCounter'. the counter variable is assigned to the original, initialized value of the state, while to setCounter is assigned a function that will change that state. The application then calls the setTimeout function and passes it two parameters: the function to increment the counter state and a timeout of 1000 ms. 




		EVENT HANDLING

now let's change the application so that the counter only ticks when the user clicks a button. for this we are going to use a m,ouse event (can also be triggerecd by keyboard or touch screen despite the name). in react, registering an event handler function to the click event happens like this: 



const App = () => {
  const [ counter, setCounter ] = useState(0)


  const handleClick = () => {
    console.log('clicked')
  }

  return (
    <div>
      <div>{counter}</div>

      <button onClick={handleClick}>
        plus
      </button>
    </div>







  )
}

