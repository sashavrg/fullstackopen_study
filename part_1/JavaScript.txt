				JavaScript



		VARIABLES


3 main ways to define variables: const, let and var.

-const is a constant. the value can no longer be updated after it's been declared.
-let is a normal variable, and its value can be changed after it's been declared.
-var works throughout the function while let is especially useful in blocks. let cannot be hoisted, var can.


		ARRAYS

if an array is declared as a const, its contents can still be changed. the const declaration ensures the immutability of the reference, but not the data it points to. 
one good way to iterate through the items of an array is using var.forEach. forEach receives a function defined using the arrow syntax


	var.forEach(value => {
	  console.log(value)
	})


When using react we often use techniques of functional programming. One of these techniques is the use of immutable data structures, which we usually avoid when using React, in favour of the method concat, which instead of adding an item to an array, creates an array with the new item added. this ensures that the original array remains unchanged.


	const t = [1, -1, 3]

	const t2 = t.concat(5)  // creates new array

	console.log(t)  // [1, -1, 3] is printed
	console.log(t2) // [1, -1, 3, 5] is printed



there are a lot of useful methods for arrays. map, for example, can be used in order to create a new array for which the function given as a parameter is used to create the items: 

	const t = [1, 2, 3]

	const m1 = t.map(value => value * 2)
	console.log(m1)   // [2, 4, 6] is printed

map can also be used to transform an array in something completely different: 

	const m2 = t.map(value => '<li>' + value + '</li>')
	console.log(m2)  
	// [ '<li>1</li>', '<li>2</li>', '<li>3</li>' ] is printed

in this case an array filled with integers is transformed into an array containing strings of HTML.

individual items of an array are easy to assign to variables with the help of the destructuring assignment:

	const t = [1, 2, 3, 4, 5]

	const [first, second, ...rest] = t

	console.log(first, second) // 1, 2 is printed
	console.log(rest)	   // [3, 4, 5] is printed


		OBJECTS

there are a few different ways of defining objects in JS. one of the most common is using object literals, which list their properties in braces:

	const object1 = {
	  name: 'Arto Hellas',
	  age: 35,
	  education: 'PhD',
	}

	const object2 = {
	  name: 'Full Stack web application development',
	  level: 'intermediate studies',
	  size: 5,
	}

	const object3 = {
	  name: {
	    first: 'Dan',
	    last: 'Abramov',
	  },
	  grades: [2, 3, 5, 3],
	  department: 'Stanford University',

the properties of an object are referenced using the "dot" notation or by using brackets:

	console.log(object1.name)	// Arto Hellas is printed
	const fieldName = 'age'
	console.log(object1[fieldName])	// 35 is printed

it's also possible to quickly add properties to an object by using dot notation or brackets:

	object1.address = 'Helsinki'
	object['secret number'] = 12341

the last addition had to be done using brackets as 'secret number' is not a valid property name since it has a space in it.



	FUNCTIONS

the complete process of defining an arrow function is this: 

	const sum = (p1, p2) => {
	  console.log(p1)
	  console.log(p2)
	  return p1 + p2
	}

and the function is called as can be expected:

	const result = sum(1, 5)
	console.log(result)

if there is just a single parameter, we can omit the parentheses:

	const square = p => {
	  console.log(p)
	  return p * p
	}

if the function contains one single expression then the braces are not needed. if we remove the console log, we can further condense the function:

	const square = p = p * p

this form is extremely handy when handling arrays (e.g. map)

	const t [1, 2, 3]

	const tSquared = t.map(p => p * p)





